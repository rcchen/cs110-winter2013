Question 1

a) Account and branch transfers can be concurrently done, interbranch
transfers can not be concurrently done. 

b) Approach is to first look at the variables that are being modified and
could be touched by multiple threads at a time. This was true for object
instances, so it made sense to be able to set locks on Account and Branch
classes so multiple threads would not be modifying a single Account at the
same time or a single Branch at the same time. The next part involves
fixing the reporting mechanism so worker logs do not interfere with each
other. This is accomplished without using locks by creating another struct
that allows workers to maintain their own daily reports for the entire day,
then set a condition variable to collect the workers at the end except
for the last worker, which is used to sum up the totals and record it for
the bank. 

///////////////

Question 2

Eliminate interbranch transfers, because it would no longer involve locking
down two branches at once in order for money to be transferred from an 
account in one branch to an account in another branch. All transfers can 
only happen within a single branch, which would be much speedier (albeit
far less convenient for customers)

///////////////

Question 3

a) The race condition that would cause this to occur is on account->balance,
where the first thread would take the banker's checking account down to zero
while the second thread checks if there are insufficient funds while there 
is still suffiient funds in the checking account. This results in subtraction
of some amount to become a negative number, which would result in assigning
the bit pattern for the negative number in 2's complement to account->balance
which would give you some massive number. Here's what the threading looks like

One: chk bal ($5)             withdraw ($5, bal $0)
Two:             chk bal ($5)                       withdraw ($5, bal $2^64-5)

b) It is more possible that this situation will occur in the 32-bit machine
because a 64-bit unsigned long long is stored as two 32-bit unsigned longs, so
there is more of a chance that interleavings will happen between these two
longs. 

///////////////

Question 4

Developed locally without a VM (Mac/10.8.2)
